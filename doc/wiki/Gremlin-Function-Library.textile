Gremlin provides a collection of functions to better facilitate various common idioms used when processing a graph data structure (as well as doing typical, general-purpose computations). These functions are broken into groups and presented below. Some of these functions have been denoted as *path*. Such functions directly consume the current path object without an explicit reference to @.@. Finally, be sure to learn how [[path functions]] can be used to alter the flow of a traversal.

The namespace for the Gremlin functions is @http://gremlin.tinkerpop.com#@ with a namespace prefix of @g@.

# "Boolean Functions":#boolean_functions
  ** @boolean g:boolean(object)@
  ** @boolean g:not(boolean)@
# "Graph Functions":#graph_functions
 ** @null g:add-aidx-key(graph?, string, string)@
  ** @edge g:add-e(graph?, object?, vertex, string, vertex)@
  ** @null g:add-idx(graph?, string, string, string)@  
  ** @vertex g:add-v(graph?, object?)@
  ** @null g:clear(graph?)@
  ** @boolean g:close(graph?)@
  ** @element g:copy-ve(graph?, element, string?, string?)@
  ** @null g:drop-idx(graph?, string)@
  ** @string g:get-tx-mode(graph?)@
  ** @edge g:id-e(graph?, object)@
  ** @vertex g:id-v(graph?, object)@
  ** @iterable g:key-e(graph?, string?, string, object)@
  ** @iterable g:key-v(graph?, string?, string, object)@
  ** @boolean g:load(graph?, string)@
  ** @null g:remove-aidx-key(graph?, string, string)@
  ** @null g:remove-ve(graph?, element)@
  ** @boolean g:save(graph?, string)@
  ** @null g:set-tx-mode(string)@
  ** @set g:show-aidx-keys(graph?, string)@
  ** @list g:show-idx(graph?)@
  ** @null g:start-tx()@
  ** @null g:stop-tx(string)@
# "Iterable, Map, Edge Functions":#ime_functions
  ** @iterable g:append(iterable, object+)@
  ** @set g:dedup(object+)@
  ** @set g:difference(object, object+)@
  ** @boolean g:except(object)@ [*path*]
  ** @list g:flatten(object+)@
  ** @object g:get(list | map | element, object, object)@
  ** @boolean g:includes(object, object)@
  ** @set g:intersect(object, object+)@
  ** @list g:keys(map | element)@
  ** @list g:list(object*)@
  ** @map g:map(object*)@
  ** @object g:op-value(string, list | map | element, object, number)@
  ** @boolean g:retain(object)@ [*path*]
  ** @set g:set(object*)@
  ** @map g:sort(iterable | map, string, boolean)@
  ** @set g:union(object, object+)@
  ** @list g:values(map | element)@
# "Input/Output Functions":#io_functions
 ** @null g:print(object*)@
# "Number Functions":#number_functions
  ** @long g:ceiling(number)@
  ** @long g:count(object)@
  ** @double g:double(object)@
  ** @float g:float(object)@
  ** @long g:floor(number)@
  ** @integer g:integer(object)@
  ** @long g:long(object)@ 
  ** @double g:power(number, number)@
  ** @integer g:rand-nat(number?)@
  ** @real g:rand-real()@
  ** @list g:range(number, number)@
  ** @long g:round(number)@
  ** @double g:sum(object+)@
# "String Functions":#string_functions
  ** @string g:concat(string, string, string*)@
  ** @boolean g:contains(string, string)@
  ** @boolean g:matches(string, string)@
  ** @string g:normalize-space(string)@
  ** @string g:replace(string, string, string)@
  ** @boolean g:starts-with(string, string)@
  ** @string g:string(object)@  
  ** @integer g:string-length(string)@
  ** @string g:substring-after(string, string)@
  ** @string g:substring-before(string, string)@
  ** @string g:substring(string, number, number?)@
  ** @string g:translate(string, string, string)@  
# "Utility Functions":#utility_functions
  ** @object g:assign(variable, object?, object)@ 
  ** @object g:from-json(string)@
  ** @list g:path(gpath)@
  ** @boolean g:p(object*)@
  ** @double g:time(number?)@
  ** @string g:to-json(object)@
  ** @string g:type(object)@
  ** @object g:unassign(variable | list | map | element, object?)@
  ** @string g:version()@

h2(#boolean_functions). Boolean Functions

h3. Boolean @boolean g:boolean(object)@

This function attempts to convert the supplied object into a boolean.

bc. gremlin> g:boolean(0)
==>false
gremlin> g:boolean(1)
==>true
gremlin> g:boolean('true')
==>true

h3. Not @boolean g:not(boolean)@

This function "flips" the value of the provided boolean.

bc. gremlin> g:not(true)
==>false
gremlin> g:not(false)
==>true 

h2(#graph_functions). Graph Functions

All graph functions require a graph on which to operate. The argument graph for any graph function can be provided or not. If the graph argument is not provided, then the graph object is assumed to be stored at the reserved variable @$_g@. Please see [[Handling Graphs]] for more information on the reserved working graph variable @$_g@. The examples provided below will demonstrate the respective graph functions with a graph argument provided.

h3. Add Automatic Index Key @null g:add-aidx-key(graph?, string, string)@

This function adds a property key to an automatic index. Once this key is specified, all vertices (or edges) that are added to this index will be automatically index according to that property. The first string is the automatic index name. The second string is the key to add to that index (use null to index all keys).

bc. gremlin> g:show-idx()
==>[vertices, vertex, auto]
==>[edges, edge, auto]
gremlin> g:type(g:show-aidx-keys('vertices'))
==>null
gremlin> g:add-aidx-key('vertices','name')
gremlin> g:add-aidx-key('vertices','location')
gremlin> g:show-aidx-keys('vertices')         
==>location
==>name

h3. Add Edge @edge g:add-e(graph?, object?, vertex, string, vertex)@

This function adds an edge to the provided graph. If an object is provided, that object is attempted to be used as the id of the edge. If that object is a map, then the map is used to provide the properties to the edge, where the key @id@ is used as the identifier for the edge (if possible).

bc. gremlin> $v1
==>v[1]
gremlin> $v2
==>v[2]
gremlin> g:add-e($v1,'knows',$v2)
==>e[3][1-knows->2]
gremlin> $e := g:add-e(g:map('weight',0.123),$v1,'realized',$v2)
==>e[4][1-realized->2]
gremlin> $e/@weight
==>0.123

h3. Add Index @null g:add-idx(graph?, string, string, string)@

This function adds a new index to an indexable graph. The first string argument is the name of the index. The second  is the class type which is either "vertex" or "edge," and the final argument is the index type which is either "auto" or "manual."

bc. gremlin> g:show-idx()                         
==>[vertices, vertex, auto]
==>[edges, edge, auto]
gremlin> g:add-idx('people','vertex','manual')
gremlin> g:show-idx()                         
==>[vertices, vertex, auto]
==>[edges, edge, auto]
==>[people, vertex, manual]

h3. Add Vertex @vertex g:add-v(graph?, object?)@

This function adds a vertex to the provided graph. If a non-vertex/map object is provided as an argument, that object is attempted to be used as the id of the vertex. However, if the provided argument object is a vertex, then the provided vertex is duplicated (equivalent properties and id). If the provided argument is a map, then the map is added as the vertex properties, where @_id@ is selected from the map as the id to use when constructing the vertex.

bc. gremlin> $_g
==>tinkergraph[vertices:0]
gremlin> g:add-v(0)
==>v[0]
gremlin> g:add-v()    
==>v[1]
gremlin> $v := g:add-v(g:map('_id',123,'name','marko'))
==>v[123]
gremlin> $v/@name
==>marko

h3. Clear @null g:clear(graph?)@

This function clears the graph of all of its vertices and edges.

bc. gremlin> $_g
==>tinkergraph[vertices:6]
gremlin> g:clear()
gremlin> $_g
==>tinkergraph[vertices:0]

h3. Close @boolean g:close(graph?)@

This function shuts down a graph instance. For in-memory graphs like TinkerGraph, this is not required. For disk-based graphs, this may be necessary to ensure a proper shutdown.

bc. gremlin> g:close()                    
==>true

h3. Copy Vertex Edge @element g:copy-ve(graph?, element, string?, string?)@

This function copies a vertex or edge from one graph (source) to another graph (target). The first graph parameter is the graph to copy the element into (i.e. target graph). The second element parameter is an element from another graph (i.e. an element from a source graph). If a property key is used to denote vertex uniqueness, then the index name is the third string parameter. The forth string parameter is the unique property name to use for vertices. If the id of a vertex is its uniqueness criteria, then do not provide a string for either the third or forth index. The reason to use a property key instead of an id is to handle those situations where a graph ignores vertex and edge ids or when copying is to a graph that is already populated with elements. What is returned is the newly created element in the target graph. Note that vertex/edge properties are copied. Finally, if an edge is copied, then its head/tail vertices are copied as well. Please see [[Graph Rewriting]] for more thorough examples and explanation of this function.

bc. gremlin> $_g
==>tinkergraph[vertices:6 edges:6]
gremlin> $h := tg:open()
==>tinkergraph[vertices:0 edges:0]
gremlin> g:copy-ve($h,g:id-v(1))
==>v[1]  
gremlin> $h
==>tinkergraph[vertices:1 edges:0]
gremlin> $h/V
==>v[1]
gremlin> g:map($h/V[0])
==>name=marko
==>age=29
gremlin> g:copy-ve($h,g:id-e(8))
==>e[8][1-knows->4]
gremlin> $h                     
==>tinkergraph[vertices:2 edges:1]

h3. Drop Index @null g:drop-idx(graph?, string)@

This function drops a named index.

bc. gremlin> g:show-idx()                         
==>[vertices, vertex, auto]
==>[edges, edge, auto]
==>[people, vertex, manual]
gremlin> g:drop-idx('people')                 
gremlin> g:show-idx()        
==>[vertices, vertex, auto]
==>[edges, edge, auto]

h3. Get Transaction Mode @string g:get-tx-mode(graph?)@

This function returns "automatic" or "manual" depending on the transaction mode of the graph.

h3. Id Edge  @edge g:id-e(graph?, object)@

This function retrieves an edge from a graph based on its provided object id.

bc. gremlin> g:id-e(10)
==>e[10][4-created->5]

h3. Id Vertex  @vertex g:id-v(graph?, object)@

This function retrieves a vertex from a graph based on its provided object id.

bc. gremlin> g:id-v(1)
==>v[1]

h3. Key Edge @iterable g:key-e(graph?, string?, string, object)@

This function retrieves edges from a graph's named index based on their properties as identified by the key/value arguments. The second argument is the name of the index and defaults to the generic "edges" automatic index.

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0 edges:0]
gremlin> $e := g:add-e(g:add-v(),'knows',g:add-v())
==>e[4][2-knows->3]
gremlin> $e/@location := 'santa fe'
==>santa fe
gremlin> g:key-e('location','santa fe')
==>e[4][2-knows->3]

h3. Key Vertex @iterable g:key-v(graph?, string? string, object)@

This function retrieves vertices from a graph's named index based on their properties as identified by the key/value arguments. The second argument is the name of the index and defaults to the generic "vertices" automatic index.

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0 edges:0]
gremlin> g:load('data/graph-example-1.xml')
==>true
gremlin> g:key-v('lang', 'java') 
==>v[3]
==>v[5]

h3. Load @boolean g:load(graph?, string)@

This function loads a GraphML representation of a graph into the provided graph object.

bc. gremlin> $_g                    
==>tinkergraph[vertices:0]
gremlin> g:load('data/graph-example-1.xml')
==>true
gremlin> $_g
==>tinkergraph[vertices:6]

h3. Remove Automatic Index Key @null g:remove-aidx-key(graph?, string, string)@

This function removes an automatic index key from a graph's named index. The first string argument is the automatic index name. The second is the key to remove.

bc. gremlin> g:show-aidx-keys('edges')          
==>location
gremlin> g:remove-aidx-key('edges','location')
gremlin> g:show-aidx-keys('edges')

h3. Remove Vertex Edge @null g:remove-ve(graph?, element)@

This function can be used to remove vertices and/or edges from a graph.

bc. gremlin> .
==>v[1]
gremlin> ./outE
==>e[7][1-knows->2]
==>e[9][1-created->3]
==>e[8][1-knows->4]
gremlin> ./outE[0]
==>e[7][1-knows->2]
gremlin> g:remove-ve(./outE[0])
gremlin> ./outE
==>e[9][1-created->3]
==>e[8][1-knows->4]

h3. Save @boolean g:save(graph?, string)@

This function saves a GraphML representation of a graph into the provided string file name.

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0]
gremlin> g:load('data/graph-example-1.xml')
==>true
gremlin> g:save('data2/graph-example-1.xml')
==>true

h3. Set Transaction Mode @null g:set-tx-mode(string)@

This function sets "automatic" or "manual" transaction mode. Automatic transactions will commit after every mutation to the graph. Manual transactions require the developer to make use of @g:start-tx()@ and @g:stop-tx()@ to handle transactions.

h3. Show Automatic Index Keys @set g:show-aidx-keys(graph?, string)@

This function returns the set of automatic index keys associated with a graph's automatic index. Note that when the automatic index key set returned is @null@, then all keys are indexed. The value @null@ serves as a wildcard.

bc. gremlin> g:add-aidx-key('edges','location') 
gremlin> g:show-aidx-keys('edges')          
==>location
gremlin> g:add-aidx-key('edges',null)
gremlin> g:type(g:show-aidx-keys('edges'))
==>null

h3. Show Indices @list g:show-idx(graph?)@

This function displays all the indices associated with the graph. A list of lists is returned. The first object of the list is the index name, the second is the index class, and the final is the index type.

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0 edges:0]
gremlin> g:show-idx()
==>[vertices, vertex, auto]
==>[edges, edge, auto]

h3. Start Transaction @null g:start-tx()@

This function will start a transaction. This function can not be executed if automatic transactions is set to @true@.

h3. Stop Transaction @null g:stop-tx(string)@

This function will stop a transaction. This function can not be executed if automatic transactions is set to @true@. The string argument states whether the transactions was successful/commit (@success@) or unsuccessful/rollback (@failure@).

h2(#ime_functions). Iterable, Map, Element Functions

h3. Append @iterable g:append(iterable, object+)@

This function appends an object to a list or set.

bc. gremlin> g:append(g:list(1,2),3,4)
==>1
==>2
==>3
==>4

h3. Deduplicate @set g:dedup(object+)@

This function removes duplicates in the arguments. For iterables, it recurssively analyzes objects and returns a single flattened list of non-duplicated objects.

bc. gremlin> g:dedup(g:list(1,2,2,3,g:set(2,3,4)),3,3,4)
==>1
==>2
==>3
==>4

h3. Difference @set g:diff(object, object+)@

This function takes two or more objects and returns a non-duplicate list containing the first object minus all the objects in the remaining arguments. If any of the arguments are lists, then the individual objects of that list are utilized in the set-minus.

bc. gremlin> g:diff(g:list(1,2,3),2,3)
==>1

h3. Except @boolean g:except(object+)@ (*path*)

This function will not allow those mid-path results that are in the provided arguments through to the next step in the path. In other words, @g:except(object+)@ is an in-path difference/set-minus.

bc. gremlin> ./outE/inV
==>v[2]
==>v[3]
==>v[4]
gremlin> ./outE/inV[g:except(g:id-v(2))]
==>v[3]
==>v[4]

h3. Flatten @list g:flatten(object+)@

This function creates a list of all the argument objects. If an argument is an iterable, it recurssively adds objects of that iterable into the return list.

bc. gremlin> g:flatten(g:list(1,2),3,g:set(4,g:list(5)))
==>1
==>2
==>3
==>4
==>5

h3. Get @object g:get(list | map | element, object)@

This function returns an object from a list or map. The second argument is an index number if the first is a list. The second argument is an object key, if the first is a map or element.

bc. gremlin> g:get(g:list(1,'marko',3),1)
==>marko
gremlin> g:get(g:map('marko',0,'pavel',1),'marko')
==>0
gremlin> g:get(g:id-v(1),'name')
==>marko

h3. Includes @boolean g:includes(iterable, object)@

This function determines if the second argument object is contained in the first argument iterable.

bc. gremlin> g:includes(g:list(1,2,3),4)
==>false
gremlin> g:includes(g:set(1,2,3),2) 
==>true

h3. Intersection @set g:intersect(object, object+)@

This function takes two or more objects and returns a set containing their intersection. If any of the arguments are iterables, then the individual objects of that iterable are intersected.

bc. gremlin> g:intersect(g:list(1,2,3),g:set(2,3,4))
==>2
==>3

h3. Keys @list g:keys(map | element)@

This function returns a set of all the keys used in the provided map.

bc. gremlin> g:keys(g:map('marko',1,'josh',2,'peter',3))
==>marko
==>peter
==>josh

h3. List @list g:list(object*)@

This function takes any number of objects and returns a list containing those objects.

bc. gremlin> g:list(1,2,g:set(3,4))
==>1
==>2
==>[3, 4]

h3. Map @map g:map(object*)@

This function creates a map. A map is an unordered collection of object pairs. Maps can not have duplicate keys.

bc. gremlin> g:map('marko',1,'josh',2,'peter',3,'pavel',4)
==>marko=1
==>peter=3
==>josh=2
==>pavel=4

If there is a single argument, then it must be an element.

bc. gremlin> g:map(g:id-v(1))
==>name=marko
==>age=29

Note that the provided argument list size must be 0 or equal 0 when modulo 2. 

bc. gremlin> g:map('marko',1,'josh',2,'peter',3,'pavel')    
Unsupported arguments for map function: Argument size must be divisible by 2

h3. Operate Value @object g:op-value(string, map | list | element, object, number)@

This function performs an operation (specified by the first argument) on the key/index value and the last argument. The possible operations are @+@, @-@, @*@, @div@, @mod@ (as strings).

bc. $m := g:map('marko',1,'josh',2,'peter',3)
==>marko=1
==>peter=3
==>josh=2
gremlin> g:op-value('-', $m, 'peter', 1)
==>2
gremlin> $m
==>marko=1
==>peter=2
==>josh=2

h3. Retain @boolean g:retain(object+)@ (*path*)

This function will only allow those mid-path results that are the arguments through to the next step in the path. In other words, @g:retain(object+)@ is an in-path intersection.

bc. bc. gremlin> ./outE/inV
==>v[2]
==>v[3]
==>v[4]
gremlin> ./outE/inV[g:retain(g:id-v(2))]
==>v[2]

h3. Set @set g:set(object*)@

This function creates a set of non-duplicate objects.

bc. gremlin> g:set(g:list(1,2),2,2,3)  
==>2
==>3
==>[1, 2]

h3. Sort @list | map g:sort(list | map | set, string?, boolean)@

This function sorts a map by its keys or its values, a list or set by its objects. For maps, the second string parameter should be either 'key' or 'value' to denote which part of the map to sort by. The final boolean parameter, if true, reverse sorts. Note that a new list or map is created --- the original list, set, or map is not altered.

bc. gremlin> $m := g:map('marko',1,'josh',2,'peter',3)
==>marko=1
==>peter=3
==>josh=2
gremlin> g:sort($m,'value',true)  
==>peter=3
==>josh=2
==>marko=1
gremlin> g:sort($m,'key',false) 
==>josh=2
==>marko=1
==>peter=3

bc. gremlin> $i := g:list(2,3,1) 
==>2
==>3
==>1
gremlin> g:sort($i,true)
==>3
==>2
==>1
gremlin> g:sort($i,false)
==>1
==>2
==>3

h3. Union @set g:union(object, object+)@

This function takes two or more objects and returns a set containing those objects. If any of the arguments are lists, then the individual objects of that list are unioned together.

bc. gremlin> g:union(g:list(1,2),2,2,3)               
==>1
==>2
==>3

h3. Values @list g:values(map | element)@

This function returns a list of all the values used in the provided map.

bc. gremlin> g:values(g:map('marko',1,'josh',2,'peter',3))
==>1
==>3
==>2

h2(#io_functions). Input/Output Functions

h3. Print @null g:print(object*)@

This function prints a string representation of the provided argument objects.

bc. gremlin> g:print('josh')
josh
gremlin> g:print('marko',' a ','rodriguez')
marko a rodriguez

h2(#number_functions). Number Functions

h3. Ceiling @long g:ceiling(number)@

This function returns the ceiling of the provided number.

bc. gremlin> g:ceiling(1.23)
==>2

h3. Count @long g:count(object)@

This function returns the total number of objects in an iterable or @1@ for all other objects.

bc. gremlin> g:count(g:list(1,2,3))
==>3
gremlin> g:count(2)            
==>1

h3. Double @double g:double(object)@

This function attempts to convert its argument into a double.

bc. gremlin> g:double(1)
==>1.0
gremlin> g:double("1.23")
==>1.23

h3. Float @float g:float(object)@

This function attempts to convert its argument into a float.

bc. gremlin> g:float(1)
==>1.0
gremlin> g:float("1.23")
==>1.23

h3. Floor @long g:floor(number)@

This function return the floor of the provided number.

bc. gremlin> g:floor(1.23)
==>1

h3. Integer @integer g:integer(object)@

This function attempts to convert its argument into an integer.

bc. gremlin> g:integer(1.02)
==>1
gremlin> g:integer("1")
==>1

h3. Long @long g:long(object)@

This function attempts to convert its argument into a long.

bc. gremlin> g:long(1.02)
==>1
gremlin> g:long("1")
==>1

h3. Power @double g:power(number, number)@

This function raises the first argument to the power provided by the second argument.

bc. gremlin> g:power(2, 6)  
==>64.0
gremlin> g:power(2, 0.5)
==>1.4142135623730951

h3. Random Natural @integer g:rand-nat(number?)@

This function returns a number between 1 and the provided number.

bc. gremlin> g:rand-nat(10)
==>7
gremlin> g:rand-nat(10)
==>9

h3. Random Real @double g:rand-real()@

This function will return a real value between 0 and 1.

bc. gremlin> g:rand-real()
==>0.38383379089246306
gremlin> g:rand-real()
==>0.09625979405897689

h3. Range @list g:range(number, number)@

Generates an ordered list of integer numbers between the provided two start and finish numbers.

bc. gremlin> g:range(4,9)
==>4
==>5
==>6
==>7
==>8

h3. Round @long g:round(number)@

This function rounds the provided number to the closet integer value.

bc. gremlin> g:round(1.499)
==>1
gremlin> g:round(1.5)
==>2

h3. Sum @double g:sum(object+)@

This function sums all the values in the arguments (using recursion through lists).

bc. gremlin> g:sum(3,g:list(1,2,g:list(3)))
==>9.0

h2(#string_functions). String Functions

h3. Concat @string g:concat(string*)@

This function returns the concatenation of the argument strings.

bc. gremlin> g:concat('gremlin', ':', ' a', ' graph', ' language')
==>gremlin: a graph language

h3. Contains @boolean g:contains(string, string)@

This function returns true if the first argument contains the string provided in the second argument.

bc. gremlin> g:contains('marko','ar')
==>true
gremlin> g:contains('josh','ar') 
==>false

h3. Matches @boolean g:matches(string, string)@

This function takes a string (first argument) and determines if the provided regular expression (second argument) matches the first argument.

bc. gremlin> g:matches('marko', '.*') 
==>true
gremlin> g:matches('marko', '[m][a][r][k][o]')
==>true
gremlin> g:matches('marko', 'ma..o')    
==>true
gremlin> g:matches('marko', 'ma..e')    
==>false

h3. Normalize Space @string g:normalize-space(string)@

This function trims the whitespace of the head and tail of the provided string.

bc. gremlin> g:normalize-space('   marko   ')  
==>marko

h3. Replace @string g:replace(string, string, string)@

This function replaces a substring in a string with the provided string.

bc. gremlin> g:replace('marko','ar','xx')
==>mxxko

h3. Starts With @boolean g:starts-with(string, string)@

This function returns true if the first argument starts with the string provided in the second argument.

bc. gremlin> g:starts-with('marko', 'ma')
==>true
gremlin> g:starts-with('peter', 'ma')
==>false

h3. String @string g:string(object)@

This function converts an object to its string representation.

bc. gremlin> g:string(./outE)
==><e[7][1-knows->2], e[9][1-created->3], e[8][1-knows->4]>

h3. String Length @integer g:string-length(string)@

This function returns the length of the provided string.

bc. gremlin> g:string-length('marko')
==>5

h3. Substring After @string g:substring-after(string, string)@

This function returns the substring in the first argument string after the occurrence of the second argument string.

bc. gremlin> g:substring-after('marko', 'ma')
==>rko

h3. Substring Before @string g:substring-before(string, string)@

This function returns the substring in the first argument string before the occurrence of the second argument string.

bc. gremlin> g:substring-before('marko', 'ko')
==>mar

h3. Substring @string substring(string, number, number?)@

This function extracts the substring between the two provided integer values. If only one integer value is provided, then the second integer value is assumed to be the length of the string.

bc. gremlin> g:substring('marko',1,4)
==>ark
gremlin> g:substring('marko',1)  
==>arko 

h3. Translate @string g:translate(string, string, string)@

This function converts characters in the second string that are found in the first string with the characters in the third string.

bc. gremlin> g:translate('marko','ar','ie')
==>mieko

h2(#utility_functions). Utility Functions

h3. Assign @boolean g:assign(variable, object?, object)@

This function assigns a value to a variable. If the variable references a list, map or element, then the second argument can serve as a key or index.

bc. gremlin> g:assign($x, 10)
==>10
gremlin> $x
==>10
gremlin> $m := g:map('marko',0)
==>marko=0
gremlin> g:assign($m,'marko',1)              
==>1
gremlin> $m
==>marko=1

h3. From JSON @string g:from-json(object)@

This function returns a Gremlin object representation of a JSON document. The "JSON.simple library":http://code.google.com/p/json-simple/ is used to do the mapping.

bc. gremlin> $a := '{"key1":[1,{"key0" : 123},3], "key2":"marko"}'
==>{"key1":[1,{"key0" : 123},3], "key2":"marko"}
gremlin> g:from-json($a)
==>key2=marko
==>key1=[1, {key0=123}, 3]
gremlin> g:from-json($a)/@key1
==>1
==>{key0=123}
==>3
gremlin> g:from-json($a)/@key1[2]
==>3
gremlin> g:from-json($a)/@key1[1]/@key0 
==>123
gremlin> g:to-json(g:from-json($a))
==>{"key2":"marko","key1":[1,{"key0":123},3]}

h2. Path @list g:path(gpath)@

This function returns the path that the traverser took through the graph.

bc. gremlin> .  
==>v[1]
gremlin> ./outE/inV
==>v[2]
==>v[3]
==>v[4]
gremlin> g:path(./outE/inV)
==>[v[1], e[7][1-knows->2], v[2]]
==>[v[1], e[9][1-created->3], v[3]]
==>[v[1], e[8][1-knows->4], v[4]]

h3. P @boolean g:p(object*)@

This function will take zero or more arguments and will always return @true@. This function is useful for forcing any function into a path function (see [[Path Functions]]) and thus, being able to utilize any function within a graph traversal.

bc. gremlin> ./outE/inV[g:p(1+2)]
==>v[2]
==>v[3]
==>v[4]

h3. Time @double g:time(number?)@

This function handles the current system time in milliseconds to nanosecond precision. If no number parameter is provided, then what is returned is the current system time in milliseconds. If a number parameter is provided, it should represent time in milliseconds. What is returned is the number of milliseconds since that provided time.

bc. gremlin> g:time() 
==>1.282145334544244E12
gremlin> g:time()
==>1.282145335120183E12

bc. gremlin> $x := g:time()
==>1.282145346079303E12
gremlin> g:time($x)
==>3201.68798828125
gremlin> g:time($x)
==>3968.10400390625
gremlin> g:time($x)
==>5137.21484375

h3. To JSON @string g:to-json(object)@

This function converts a Gremlin list, map, vertex, and edge into a string representation of a JSON document. 

bc. gremlin> g:to-json(g:id-v('1'))
==>{"_type":"vertex","_id":"1","_properties":{"age":29,"name":"marko"},"inE":[],"outE":["7","9","8"]}
gremlin> g:to-json($_g)  
==>tinkergraph[vertices:6]
gremlin> g:to-json('a string')
==>a string
gremlin> g:to-json(1.23)     
==>1.23
gremlin> g:to-json(g:list(1,'pavel',3,4,'marko'))
==>[1,"pavel",3,4,"marko"]
gremlin> g:to-json(g:list(1,g:id-v('1'),g:id-v('1')/outE[1],'peter'))
==>[1,{"_type":"vertex","_id":"1","_properties":{"age":29,"name":"marko"},"inE":[],"outE":["7","9","8"]},{"_type":"edge","outV":"1","_id":"9","_properties":{"weight":0.4},"inV":"3"},"peter"]

h3. Type @string g:type(object)@

This function returns a string representation of the object type.

bc. gremlin> g:type('marko')
==>string
gremlin> g:type(1+2)
==>integer
gremlin> g:type(1+1.2)
==>float
gremlin> g:type(./outE[0])
==>edge

h3. Unassign @object g:unassign(variable | list | map | element, object?)@

This function deallocates memory for a provided variable, list, map, or element. If the variable references a list, map, or element, then the second argument serves as a key or index.

bc. gremlin> $x := 'marko'
==>marko
gremlin> g:unassign($x)
==>marko
gremlin> $x
gremlin> $x := g:list(1,2,3)
==>1
==>2
==>3
gremlin> g:unassign($x,0)
==>1
gremlin> $x
==>2
==>3

h3. Version @string g:version()@

This function returns version information pertaining to the running Gremlin instance.
