!https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-gremopoly.png!

In Gremlin, the same path expression can be written in numerous ways. Gremlin is an "imperative language":http://en.wikipedia.org/wiki/Imperative_programming in that the developer explicitly instructs Gremlin which path to take through the graph (as defined by an abstract path description). However, Gremlin doesn't always do as he is told. There are various optimizations that Gremlin will automatically take advantage of. This section describes such automatic optimizations.

h2. Vertex Query Optimization

In "Blueprints":http://blueprints.tinkerpop.com, their is a method called @Vertex.query()@. This method returns a @Query@ object that can be configured to filter the edges/vertices associated with that @Vertex@ according to edge labels, edge properties, edge property intervals, etc. Whenever a pattern such as @outE....inV@ is seen by Gremlin, Gremlin will automatically compile that statement into a @Query@ object.

```text
gremlin> g.v(1).outE('knows','created').interval('weight',0.5,1.0).has('date',2012).inV.name.toString()
==>[StartPipe, QueryPipe(out,[knows, created],has:true,interval:true,edge), IdentityPipe, IdentityPipe, InVertexPipe, PropertyPipe(name)]
```

However, Gremlin ensures that the pipeline length stays the same by introducing @IdentityPipe@ steps. This ensure that numbered step constructs (e.g. @loop(2)@, @back(1)@) remain faithful. Though it is always a good idea to @toString()@ an expression when using numbered steps to ensure proper indexing. 

If the query optimization is not desired, there is the method @GremlinPipeline.optimize(boolean)@. This method makes it possible to turn off query optimizations.

```text
gremlin> g.v(1).optimize(false).outE('knows','created').interval('weight',0.5,1.0).has('date',2012).inV.name.toString()
==>[StartPipe, OutEdgesPipe(knows,created), IntervalFilterPipe, PropertyFilterPipe(date,EQUAL,2012), InVertexPipe, PropertyPipe(name)]
```

h2. Automatic Path Enabling

"Pipes":http://pipes.tinkerpop.com natively supports the recording of the history of a particular traversal. By default, Gremlin does not assume that path information will be required of the traversal unless a path-specific step is called -- e.g. @path@, @simplePath@. If the path information is required internal to a closure, Gremlin doesn't know that as it can not interpret what is in a closure. As such, be sure to @GremlinPipeline.enablePath()@ if path information will be required by the expression.

```text
gremlin> g.v(1).out.loop(1){it.loops < 3}{it.path.contains(g.v(4))}             
Cannot invoke method contains() on null object
Display stack trace? [yN] 
gremlin> g.v(1).out.loop(1){it.loops < 3}{it.path.contains(g.v(4))}.enablePath()
==>v[5]
==>v[3]
```