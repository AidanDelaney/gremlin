!https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-pipe.png!

Gremlin comes with a collection of predefined steps. Gremlin steps map to a particular @Pipe@ in "Pipes":http://pipes.tinkerpop.com. A @Pipe<S,E>@ extends @Iterator<E>@ and @Iterable<E>@. It takes an object of type @S@ and emits and object of type @E@. Chaining pipes together creates a @Pipeline@. In essence, Gremlin is a "DSL":http://en.wikipedia.org/wiki/Domain-specific_language for constructing @Pipeline@ objects.

h1. Step Library

Even link in a pipeline is called a step. Steps can be categorized as either being transform-, filter-, sideEffect-, or branch- based.

* @step@: a generic, general-purpose computational step.
** @transform@: take an object and emit a transformation of it.
** @filter@: decide whether to allow an object to pass or not.
** @sideEffect@: pass the object, but yield some side effect.
** @branch@: decide which step to take.

h2. Step

|_. step |_. description |_. pipe |
| @step{closure}@ | an anonymous/lambda step defined by a closure | @FunctionPipe(closure)@ |

h2. Transform-Based Steps

|_. step |_. description |_. pipe |
| @transform{closure}@ | emit the result of the closure | @TransformFunctionPipe(closure)@ |
| @_@ | emit the incoming object unchanged | @IdentityPipe()@ |
| @V@ | the vertex iterator of the graph | @VerticesPipe()@ |
| @E@ | the edge iterator of the graph | @EdgesPipe()@ |
| @id@ | the identifier of the element | @IdPipe()@ |
| @label@ | the label of the edge | @LabelPipe()@ |
| @out(labels...?)@ | out adjacent vertices to the vertex | @OutPipe(labels...?)@ |
| @outE(labels...?)@ | the outgoing edges of the vertex | @OutEdgesPipe(labels...?)@ |
| @in(labels...?)@ | in adjacent vertices to the vertex | @InPipe(labels...?)@ |
| @inE(labels...?)@ | the incoming edges of the vertex | @InEdgesPipe(labels...?)@ |
| @both(labels...?)@ | both adjacent vertices of the vertex | @BothPipe(labels...?)@ |
| @bothE(labels...?)@ | both incoming and outgoing edges of the vertex | @BothEdgesPipe(labels...?)@ |
| @outV@ | the outgoing tail vertex of the edge | @OutVertexPipe()@ |
| @inV@ | the incoming head vertex of the edge | @InVertexPipe()@ |
| @bothV@ | both incoming and outgoing vertices of the edge | @BothVerticesPipe()@ |
| @['key']@ | get the property value of an element | @PropertyPipe('key')@ |
| @key@ | get the property value of an element | @PropertyPipe(key)@ |
| @map@ | get the property map of an element | @PropertyMapPipe()@ |
| @memoize(string, map?)@ | "memoize":http://en.wikipedia.org/wiki/Memoization a named section with optional map being a cache | @MemoizePipe()@ |
| @memoize(integer, map?)@ | "memoize":http://en.wikipedia.org/wiki/Memoization @n@-steps ago with optional map being a cache | @MemoizePipe()@ |
| @gather{closure?}@ | collect all objects up to that step and process with provided closure | @GatherPipe()@ and @TransformFunctionPipe(closure)@ |
| @scatter@ | unroll all objects in the iterable at that step | @ScatterPipe()@ |
| @paths(closures...?)@ | the path through the pipeline up to this point, where closures are post-processing for each object in the path | @PathPipe()@ or @PathFunctionPipe(closures...?)@ |
| @cap@ | emits the side effect of the pipe prior | @SideEffectCapPipe(pipe)@ |

* The @paths@ step is called @paths@ in Groovy, but called @path@ in the other JVM implementations. This is due to Groovy not requiring @get@ when a @getXXX()@ method is called and @getPath()@ is a method of @Pipeline@.

h2. Filter-Based Steps

|_. step |_. description |_. pipe |
| @filter{closure}@ | return true to allow the object to pass | @FilterClosurePipe(closure)@ |
| @[i]@ | emit the particular indexed object | @RangeFilterPipe(i,i)@ |
| @[i..j]@ | emit the objects indexed by the range | @RangeFilterPipe(i,j)@ |
| @propertyFilter('key',T,value)@ | filter elements by their properties | @PropertyFilterPipe('key',value,T)@ |
| @back(integer)@ | go back to the results from n-steps ago | @BackFilterPipe(Pipe())@ |
| @back(string)@ | go back to the results as the named step | @BackFilterPipe(Pipe())@ |
| @and(pipes...)@ | emit the incoming object if all pipes emit results | @AndFilterPipe(pipes...)@ |
| @or(pipes...)@ | emit the incoming object if any pipe emit results | @OrFilterPipe(pipes...)@ |
| @random(double)@ | emit the incoming object if biased coin toss is heads | @RandomFilterPipe(double)@ |
| @dedup@ | emit only incoming objects that have not been seen before | @DuplicateFilterPipe()@ |
| @simplePath@ | emit the object only if the current path has no repeated elements | @CyclicPathFilterPipe()@ |
| @except(collection)@ | allow everything to pass except what is in @collection@ | @ExceptFilterPipe(collection)@ |
| @retain(collection)@ | allow everything to pass except what is not in @collection@ | @RetainFilterPipe(collection)@ |

h2. SideEffect-Based Steps

|_. step |_. description |_. pipe |
| @sideEffect{closure}@ | emits the input, but calls a side effect closure on each input | @SideEffectClosurePipe(closure)@ |
| @groupCount(map?){closure?}{closure?}@ | emits input, but updates a map for each input, where closures provides generic map update | @GroupCountClosurePipe(map?,closure?,closure?)@ |
| @aggregate(collection?,closure?)@ | emits input, but adds input to a collection, where provided closure processes input prior to collection insertion | @AggregatePipe(collection?,closure?)@ |
| @table(table?,strings...?,closures...?)@ | emits input, but stores row of @as@ values (constrained by column names if provided) | @TablePipe(table, strings...?, closures...?)@ |
| @as(string)@ | emits input, but names the previous step | @AsPipe(string, Pipe())@ |
| @optional(integer)@ | go back to the results from n-steps ago | @OptionalPipe(Pipe())@ |
| @optional(string)@ | go back to the results as the named step | @OptionalPipe(Pipe())@ |

h2. Branch-Based Steps

|_. step |_. description |_. pipe |
| @loop(integer){whileClosure}{emitClosure?}@ | if whileClosure true for emitted object, put object back at start (emit object mid-loop if emitClosure is true) | @LoopPipe(Pipe(),whileClosure,emitClosure?)@ |
| @loop(string){whileClosure}{emitClosure?}@ | if whileClosure true for emitted object, put object back at start (emit object mid-loop if emitClosure is true) | @LoopPipe(Pipe(),whileClosure,emitClosure?)@ |
| @ifThenElse{ifClosure}{thenClosure}{elseClosure}@ | if/then/else branch | @IfThenElsePipe(ifClosure,thenClosure,elseClosure)@ |
| @copySplit(pipes...)@ | copies incoming object to internal pipes | @CopySplitPipe(pipes...)@ |
| @fairMerge@ | round-robin merges internal pipe objects | @FairMergePipe)@ |
| @exhaustMerge@ | exhaustively merges internal pipe objects | @ExhaustMergePipe()@ |

h3. Notes

  * If a pipe's argument is postfixed with a @?@, then the argument is optional. When no argument is provided, a reasonable default argument is created.
  * If you come up a with a generally useful step/pipe and would like to include it into the main Gremlin distribution, please make an "issue":https://github.com/tinkerpop/gremlin/issues or provide the appropriate pull request.
