!https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-pipe.png!

Gremlin comes with a collection of predefined steps. Gremlin steps map to a particular @Pipe@ in "Pipes":http://pipes.tinkerpop.com. A @Pipe<S,E>@ extends @Iterator<E>@ and @Iterable<E>@. It takes an object of type @S@ and emits and object of type @E@. Chaining pipes together creates a @Pipeline@. In essence, Gremlin is a "DSL":http://en.wikipedia.org/wiki/Domain-specific_language for constructing @Pipeline@ objects.

h1. Step Library

There is a structure to steps. This structure is articulated in the itemization below. All steps can be categorized as either being transform-, filter-, or sideEffect-based.

* @step@: a generic, general-purpose computational step.
** @transform@: take an object and emit a transformation of it.
** @filter@: decide whether to allow an object to pass or not.
** @sideEffect@: pass the object, but yield some side effect.

h2. The Step

|_. step |_. description |_. pipe |
| @step{closure}@ | an anonymous/lambda step defined by a closure | @ClosurePipe(closure)@ |

h2. The Transform-Based Steps

|_. step |_. description |_. pipe |
| @transform{closure}@ | emit the result of the closure | @TransformClosurePipe(closure)@ |
| @_@ | emit the incoming object unchanged | @IdentityPipe()@ |
| @V@ | the vertex iterator of the graph | @VerticesPipe@ |
| @E@ | the edge iterator of the graph | @EdgesPipe@ |
| @id@ | the identifier of the element | @IdPipe()@ |
| @label@ | the label of the edge | @LabelPipe()@ |
| @out(labels...?)@ | out adjacent vertices to the vertex | @OutPipe(labels...?)@ |
| @outE(labels...?)@ | the outgoing edges of the vertex | @OutEdgesPipe(labels...?)@ |
| @in(labels...?)@ | in adjacent vertices to the vertex | @InPipe(labels...?)@ |
| @inE(labels...?)@ | the incoming edges of the vertex | @InEdgesPipe(labels...?)@ |
| @both(labels...?)@ | both adjacent vertices of the vertex | @BothPipe(labels...?)@ |
| @bothE(labels...?)@ | both incoming and outgoing edges of the vertex | @BothEdgesPipe(labels...?)@ |
| @outV@ | the outgoing tail vertex of the edge | @OutVertexPipe()@ |
| @inV@ | the incoming head vertex of the edge | @InVertexPipe()@ |
| @bothV@ | both incoming and outgoing vertices of the edge | @BothVerticesPipe()@ |
| @['key']@ | get the property value of an element | @PropertyPipe('key')@ |
| @key@ | get the property value of an element | @PropertyPipe(key)@ |
| @map@ | get the property map of an element | @PropertyMapPipe()@ |
| @memoize(string)@ | "memoize":http://en.wikipedia.org/wiki/Memoization a named section | @MemoizePipe()@ |
| @memoize(integer)@ | "memoize":http://en.wikipedia.org/wiki/Memoization @n@-steps ago | @MemoizePipe()@ |
| @gather{closure?}@ | collect all objects up to that step and process with provided closure | @GatherPipe()@ and @TransformClosurePipe(closure)@ |
| @scatter@ | unroll all objects in the iterable at that step | @ScatterPipe()@ |
| @loop(integer){closure}@ | if closure true for emitted object, put object back at start | @LoopPipe(Pipe(),closure)@ |
| @loop(string){closure}@ | if closure true for emitted object, put object back at start | @LoopPipe(Pipe(),closure)@ |
| @paths(closures...?)@ | the path through the pipeline up to this point, where closures are post-processing for each object in the path | @PathPipe()@ or @PathClosurePipe(closures...?)@ |
| @cap@ | emits the side effect of the pipe prior | @SideEffectCapPipe(pipe)@ |
| @ifThenElse{ifClosure}{thenClosure}{elseClosure}@ | if/then/else branch | @IfThenElsePipe(ifClosure,thenClosure,elseClosure)@ |
| @copySplit(pipes...)@ | copies incoming object to internal pipes | @CopySplitPipe(pipes...)@ |
| @fairMerge(pipes...)@ | round-robin merges internal pipe objects | @FairMergePipe(pipes...)@ |
| @exhaustMerge(pipes..)@ | exhaustively merges internal pipe objects | @ExhaustMergePipe(pipes...)@ |

h2. The Filter-Based Steps

|_. step |_. description |_. pipe |
| @filter{closure}@ | return true to allow the object to pass | @FilterClosurePipe(closure)@ |
| @[i]@ | emit the particular indexed object | @RangeFilterPipe(i,i)@ |
| @[i..j]@ | emit the objects indexed by the range | @RangeFilterPipe(i,j)@ |
| @[key:value]@ | filter elements by their properties | @PropertyFilterPipe('key',value,EQUALS)@ |
| @[key:[T,value]]@ | filter elements by their properties | @PropertyFilterPipe('key',value,T)@ |
| @propertyFilter('key',T,value)@ | filter elements by their properties | @PropertyFilterPipe('key',value,T)@ |
| @back(integer)@ | go back to the results from n-steps ago | @BackFilterPipe(Pipe())@ |
| @back(string)@ | go back to the results as the named step | @BackFilterPipe(Pipe())@ |
| @andFilter(pipes...)@ | emit the incoming object if all pipes emit results | @AndFilterPipe(pipes...)@ |
| @orFilter(pipes...)@ | emit the incoming object if any pipe emit results | @OrFilterPipe(pipes...)@ |
| @random(double)@ | emit the incoming object if biased coin toss is heads | @RandomFilterPipe(double)@ |
| @uniqueObject@ | emit only incoming objects that have not been seen before | @DuplicateFilterPipe()@ |
| @uniquePath@ | emit the object only if the current path has no repeated elements | @UniquePathFilterPipe()@ |
| @except(collection)@ | allow everything to pass except what is in @collection@ | @ExceptFilterPipe(collection)@ |
| @retain(collection)@ | allow everything to pass except what is not in @collection@ | @RetainFilterPipe(collection)@ |

h2. The SideEffect-Based Steps

|_. step |_. description |_. pipe |
| @sideEffect{closure}@ | emits the input, but calls a side effect closure on each input | @SideEffectClosurePipe(closure)@ |
| @groupCount(map?){closures...?}@ | emits input, but updates a map for each input, where closures provides generic map update | @GroupCountClosurePipe(map?,closures...?)@ |
| @aggregate(collection?,closure?)@ | emits input, but adds input to a collection, where provided closure processes input prior to collection insertion | @AggregatePipe(collection?,closure?)@ |
| @table(table,strings...?,closures...?)@ | emits input, but stores row of @as@ values (constrained by column names if provided) | @TablePipe(table, strings...?, closures...?)@ |
| @as(string)@ | emits input, but names the previous step | @AsPipe(string, Pipe())@ |
| @optional(integer)@ | go back to the results from n-steps ago | @OptionalPipe(Pipe())@ |
| @optional(string)@ | go back to the results as the named step | @OptionalPipe(Pipe())@ |

h3. Notes

  * If a pipe's argument is postfixed with a @?@, then the argument is optional. When no argument is provided, a reasonable default argument is created.
  * The steps @[key:value]@, @[key:[T,value]]@, and @propertyFilter(key,T,value)@ map to @LabelFilterPipe(value, Filter)@ or @IdFilterPipe(value, Filter)@ when the @key@ equals "label" or "id", respectively.
  * If you come up a with a generally useful step/pipe and would like to include it into the main Gremlin distribution, please make an "issue":https://github.com/tinkerpop/gremlin/issues or provide the appropriate pull request.

h1. Groovy and Steps

In many situations, a step looks like an object property from a Java/Groovy perspective. In fact, each step is a method. However, by using the "metaprogramming":http://en.wikipedia.org/wiki/Metaprogramming facilities offered by Groovy, its possible to "trick" Groovy into thinking that a property is a method. For example, assume the following pipeline:

```java
v.outE.inV.name
```

This can be re-written in more Java/Groovy friendly syntax as:

```java
v.outE().inV().name
```

In the first example, when Groovy realizes that @outE@ is not a property of @v@, it calls the @propertyMissing@ method of the @MetaClass@ of @Vertex@. Gremlin uses this method to say "oh, @outE@ is not a property, its a method. Let me resolve that method and return its value." At which point, Gremlin returns the running @Pipeline@ with the new @OutEdgePipe@ appended to it.

There are many situations in which calling the method instead of the property representation of a @Pipe@ is necessary. 


