!https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-pipe.png!

Gremlin comes with a collection of predefined steps. Gremlin steps map to a particular @Pipe@ in "Pipes":http://pipes.tinkerpop.com. A @Pipe<S,E>@ extends @Iterator<E>@ and @Iterable<E>@. It takes an object of type @S@ and emits and object of type @E@. Chaining pipes together creates a @Pipeline@. In essence, Gremlin is a "DSL":http://en.wikipedia.org/wiki/Domain-specific_language for constructing @Pipeline@ objects.

==<hr/>==

h1. Step Library

There is a structure to steps. This structure is articulated in the itemization below. All steps can be categorized as either being emit-, filter-, or foreach-based.

* @step@: a generic, general-purpose computational step.
** @emit@: take an object and emit a transformation of it.
** @filter@: decide whether to allow an object to pass or not.
** @foreach@: pass the object, but yield some side effect.

h2. The Step

|_. step |_. filter? |_. description |_. pipe |
| @step{closure}@ | no | an anonymous/lambda step defined by a closure | @ClosurePipe(closure)@ |


h2. The Emit-Based Steps

|_. step |_. filter? |_. description |_. pipe |
| @emit{closure}@ | no | emit the result of the closure | @EmitPipe(closure)@ |
| @_@ | yes | emit the incoming object unchanged | @IdentityPipe()@ |
| @V@ | yes | the vertex iterator of the graph | @GraphElementPipe(VERTEX)@ |
| @E@ | yes | the edge iterator of the graph | @GraphElementPipe(EDGE)@ |
| @id@ | yes | the identifier of the element | @IdPipe()@ |
| @label@ | yes | the label of the edge | @LabelPipe()@ |
| @outE@ | yes | the outgoing edges of the vertex | @VertexEdgePipe(OUT_EDGES)@ |
| @inE@ | yes | the incoming edges of the vertex | @VertexEdgePipe(IN_EDGES)@ |
| @bothE@ | yes | both incoming and outgoing edges of the vertex | @VertexEdgePipe(BOTH_EDGES)@ |
| @outV@ | yes | the outgoing tail vertex of the edge | @EdgeVertexPipe(OUT_VERTEX)@ |
| @inV@ | yes | the incoming head vertex of the edge | @EdgeVertexPipe(IN_VERTEX)@ |
| @bothV@ | yes | both incoming and outgoing vertices of the edge | @EdgeVertexPipe(BOTH_VERTICES)@ |
| @['key']@ | yes | get the property value of an element | @PropertyPipe('key')@ |
| @key@ | yes | get the property value of an element | @PropertyPipe(key)@ |
| @gather{closure?}@ | no | collect all objects up to that step and process with provided closure | @GatherPipe()@ |
| @scatter@ | yes | unroll all objects in the iterable at that step | @ScatterPipe()@ |
| @loop(integer){closure}@ | no | if closure true for emitted object, put object back at start | @LoopPipe(Pipe(),closure)@ |
| @paths@ | yes | the path through the pipeline up to this point | @PathPipe()@ |
| @cap@ | yes | emits the side effect of the pipe prior | @SideEffectCapPipe(pipe)@ |
| @ifelse{ifClosure}{thenClosure}{elseClosure?}@ | no | if/then/else branch | @IfPipe(ifClosure,thenClosure,elseClosure?)@ |

h2. The Filter-Based Steps

|_. step |_. filter? |_. description |_. pipe |
| @filter{closure}@ | no | return true to allow the object to pass | @ClosureFilterPipe(closure)@ |
| @outE('label')@ | yes | the outgoing label-edges of the vertex | @VertexEdgeLabelFilterPipe(OUT_EDGES,'label')@ |
| @inE('label')@ | yes | the incoming label-edges of the vertex | @VertexEdgeLabelFilterPipe(IN_EDGES,'label')@ |
| @bothE('label')@ | yes | both incoming and outgoing label-edges of the vertex | @VertexEdgeLabelFilterPipe(BOTH_EDGES,'label')@ |
| @[i]@ | no | emit the particular indexed object | @RangeFilterPipe(i,i+1)@ |
| @[i..j]@ | no | emit the objects indexed by the range | @RangeFilterPipe(i,j)@ |
| @[key:value]@ | no | filter elements by their properties | @PropertyFilterPipe('key',value,EQUALS)@ |
| @[key:[T,value]]@ | no | filter elements by their properties | @PropertyFilterPipe('key',value,T)@ |
| @propf('key',T,value)@ | yes | filter elements by their properties | @PropertyFilterPipe('key',value,T)@ |
| @futuref@ | no | filter an object based on if it has a future | @FutureFilterPipe(Pipe())@ |
| @back(integer)@ | no | go back to the results from n-steps ago | @FutureFilterPipe(Pipe())@ |
| @andf(pipes...)@ | no | emit the incoming object if all pipes emit results | @AndFilterPipe(pipes)@ |
| @orf(pipes...)@ | no | emit the incoming object if any pipe emit results | @OrFilterPipe(pipes)@ |
| @unique@ | yes | emit only incoming objects that have not been seen before | @DuplicateFilterPipe()@ |
| @uniquePath@ | yes | emit the object only if the current path has no repeated elements | @UniquePathFilterPipe()@ |
| @except(collection)@ | yes | allow everything to pass except what is in @collection@ | @CollectionFilterPipe(collection, EQUALS)@ |
| @retain(collection)@ | yes | allow everything to pass except what is not in @collection@ | @CollectionFilterPipe(collection, NO_EQUAL@ |

h2. The Foreach-Based Steps

|_. step |_. filter? |_. description |_. pipe |
| @foreach{closure}@ | no | emits the input, but calls a side effect closure on each input | @ForeachPipe(closure)@ |
| @groupCount(map?,closure?)@ | no | emits input, but updates a map for each input (closure provides generic map update) | @GroupCountPipe(map?)@ or @GroupCountClosurePipe(map?,closure)@ |
| @aggregate(collection?)@ | yes | emits input, but adds input to a collection | @AggregatorPipe(collection?)@ |

h3. Notes

  * If a pipe's argument is postfixed with a @?@, then the argument is optional. When no argument is provided, a reasonable default argument is created.
  * The steps @[key:value]@, @[key:[T,value]]@, and @propf(key,T,value)@ map to @LabelFilterPipe(value, Filter)@ or @IdFilterPipe(value, Filter)@ when the @key@ equals "label" or "id", respectively.
  * The @filter?@ column denotes whether a closure is allowed after the step name. If a closure is provided, the closure is passed to a @ClosureFilterPipe@. The closure must return "Groovy truth":http://docs.codehaus.org/display/GROOVY/Groovy+Truth which determines whether the @it@ element is filtered or not. E.g. @outE{ it.weight > 0.5 }@.
  * If you come up a with a generally useful step/pipe and would like to include it into the main Gremlin distribution, please make an "issue":https://github.com/tinkerpop/gremlin/issues or provide the appropriate pull request.

==<hr/>==

h1. Groovy and Steps

In many situations, a step looks like an object property from a Java/Groovy perspective. In fact, each step is a method. However, by using the "metaprogramming":http://en.wikipedia.org/wiki/Metaprogramming facilities offered by Groovy, its possible to "trick" Groovy into thinking that a property is a method. For example, assume the following pipeline:

```java
v.outE.inV.name
```

This can be re-written in more Java/Groovy friendly syntax as:

```java
v.outE().inV().name
```

In the first example, when Groovy realizes that @outE@ is not a property of @v@, it calls the @propertyMissing@ method of the @MetaClass@ of @Vertex@. Gremlin uses this method to say "oh, @outE@ is not a property, its a method. Let me resolve that method and return its value." At which point, Gremlin returns the running @Pipeline@ with the new @VertexEdgePipe(Step.OUT_EDGES)@ appended to it.

There are many situations in which calling the method instead of the property representation of a @Pipe@ is necessary. 


