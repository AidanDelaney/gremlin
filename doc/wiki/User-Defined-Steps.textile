Gremlin provides the ability for a user to define their own step definitions natively in Groovy or in Java. This is very useful when wishing to work with your low-level graph data at a higher level of abstraction.  This section will discuss how to write your own step definitions and demonstrate how they are useful for making your Gremlin code more concise and more self-explanatory.

# "Defining a Step in Gremlin":#definegremlin
# "Defining an Anonymous Step in Gremlin":#defineanony
# "Defining a Step in Java":#definejava

h2(#definegremlin). Defining a Step in Gremlin

Gremlin comes with a collection of built-in step definitions (see [[Gremlin Steps]]). It is possible for developers to create their own step definitions. Simply add a closure that represents the step to the respective classes. 

```text
Gremlin.addStep("codeveloper")
c = {_{x = it}.outE('created').inV.inE('created').outV{!x.equals(it)}}
[Pipe,Vertex].each{it.metaClass.codeveloper = { Gremlin.compose(delegate, c()) }} 
```

In the code above, @c@ is a closure to create the desired composite step and the second line is required to add @c@ as the @co_developer@ step. Given the graph diagrammed in [[Defining a Property Graph]], we can determine the co-developers of a particular vertex.

!https://github.com/tinkerpop/gremlin/raw/master/doc/images/grammar-example-1.jpg!

```text
gremlin> g = TinkerGraphFactory.createTinkerGraph()
==>tinkergraph[vertices:6 edges:6]
gremlin> g.v(1).codeveloper
==>v[4]
==>v[6]
```

Realize that this step definition can be used like any other step definition.

```text
gremlin> g.v(1).codeveloper.name
==>josh
==>peter
```

What step definitions allow you to do is to work with "higher order" relationships in your graph. Thus, instead of working at the level of 

```text
_{x = it}.outE('created').inV.inE('created').outV{x != it}
```

you can work at the more semantically natural level of

```text
codeveloper
```

h2(#defineanony). Defining an Anonymous Step in Gremlin

You can also create an anonymous step (or "lambda step") using the @step@ step. For example:

```text
gremlin> g = TinkerGraphFactory.createTinkerGraph()    
==>tinkergraph[vertices:6 edges:6]
gremlin> g.v(1).outE.inV.step{ s().map }
==>{name=vadas, age=27}
==>{name=lop, lang=java}
==>{name=josh, age=32}
```

The method @s()@ is equivalent to @starts.next()@ which is defined in "Pipes":http://pipes.tinkerpop.com and represents the next end of the previous pipe. For those familiar with Pipes, the provided @step@ closure becomes the method @AbstractPipe.processNextStart()@. 

h2(#definejava). Defining a Step in Java

To ensure speed, it is possible to define steps in Java and then load the paths using @import@. Here is the previous @co-developer@ path written in Java as a pipe (see "Pipes":http://pipes.tinkerpop.com).

```java
public class CoDeveloperPipe extends Pipeline<Vertex,Vertex> {
  public CoDeveloperPipe() {
     List singleObjectList = new ArrayList() {
            public boolean add(Object object) {
                this.clear();
                super.add(object);
                return true;
            }
        };
     Pipe pipe0 = new AggregatorPipe(singleObjectList);
     Pipe pipe1 = new OutEdgesPipe();
     Pipe pipe2 = new LabelFilterPipe("created", Filter.NOT_EQUALS);
     Pipe pipe3 = new InVertexPipe()
     Pipe pipe4 = new InEdgesPipe();
     Pipe pipe5 = new LabelFilterPipe("created", Filter.NOT_EQUALS);
     Pipe pipe6 = new OutVertexPipe();
     Pipe pipe7 = new ObjectFilterPipe(pipe0.getSideEffect(), Filter.EQUALS);
     this.setPipes(pipe0, pipe1, pipe2, pipe3, pipe4, pipe5, pipe6, pipe7);
   }
}
```

Make sure that this class is in your Java classpath. If so, you can now include this newly created step/pipe in Gremlin.

```text
Gremlin.addStep("codeveloper")
[Iterable,Iterator,Vertex].each{ it.metaClass.codeveloper = {Gremlin.compose(delegate, new CoDeveloperPipe())}}
```