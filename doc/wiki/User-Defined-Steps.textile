Gremlin provides the ability for a user to define their own step definitions natively in Gremlin or in Java. This is very useful when wishing to work with your low-level graph data at a higher level of abstraction.  This section will discuss how to write your own step definitions and demonstrate how they are useful for making your Gremlin code more concise and more self-explanatory.

# "Defining a Step in Gremlin":#definegremlin
# "Defining a Step in Java":#definejava

h2(#definegremlin). Defining a Step in Gremlin

Gremlin comes with a collection of built-in step definitions. A few of these are itemized below.

* @V@: the vertices in a graph.
* @E@: the edges in a graph.
* @inE@: the incoming edges to a vertex.
* @outE@: the outgoing edges from a vertex.
* @inV@: the incoming/head vertex of an edge.
* @outV@: the outgoing/tail vertex of an edge.

It is possible for developers to create their own step definitions. The grammar for defining a step is as follows.

bc. step string
  statement*
  end

The @string@ component is the name of the step and the @statement*@ body the algorithm to execute when this step is used in an expression. In many ways, a step definition looks like a function. However, unlike a function, it has no arguments. In fact, it only takes one argument and that argument is the current step object @.@. Below is an example @step@.

bc. step co-developer
  ./outE[@label='created']/inV/inE[@label='created']/outV[g:except($_)]
  end

Given the graph diagrammed in [[Defining a Property Graph]], we can determine the co-developers of a particular vertex.

!http://github.com/tinkerpop/gremlin/raw/master/doc/images/grammar-example-1.jpg!

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0]
gremlin> g:load('data/graph-example-1.xml')
==>true
gremlin> $_ := g:id-v(1)
==>v[1]
gremlin> .
==>v[1]
gremlin> ./co-developer
==>v[4]
==>v[6]

Realize that this step definition can be used like any other step definition.

bc. gremlin> ./co-developer/@name
==>josh
==>peter

From the above, we know that the co-developers of vertex @1@ (marko) are named josh and peter.

What step definitions allow you to do is to work with "higher order" relationships in your graph. Thus, instead of working at the level of 

bc. ./outE[@label='created']/inV/inE[@label='created']/outV[g:except($_)]

you can work at the more semantically natural level of

bc. ./co-developer

h2(#definejava). Defining a Step in Java

It is also possible to define steps in Java and then load the paths into the Gremlin engine using the @include@ language statement (see [[Language Statements]]). Gremlin comes with two interfaces for creating steps libraries: @Pipe@, @Step@, @Steps@ (both are in the package @com.tinkerpop.gremlin.compiler.steps@). Here is the previous @co-developer@ path written in Java.

```java
public class CoDeveloperPipe extends AbstractPipe<Vertex,Vertex> {
    public Vertex processNextStarts() {
      Vertex vertex = this.starts.next();
      ...
    }
}
```

If the @root@ parameter is not the type expected by the path definition, simply return @null@. Do not throw an exception like one would for a function definition (see [[User Defined Functions]]). If the path does not yield results, then @null@ is the result. Now create a path library for the previously defined path and for any other paths you wish to define.

```java
public class ExampleSteps extends AbstractStepLibrary {
   public ExampleSteps() {
      this.add(new Step("co-developer", CoDeveloperPath.class, null));
      // add as many steps to this library as you want
   }
}
```

Make sure that these classes are in your Java classpath. If so, you can now include this newly created library in Gremlin.

bc. gremlin> include 'com.example.ExampleSteps'
gremlin> .
==>v[1]
gremlin> ./co-developer
==>v[4]
==>v[6]

A useful file is @.gremlinrc@ (recommended by "Ian Holsman":http://twitter.com/IanHolsman). Feel free to add common @include@, function definitions, step definitions, and variable definitions to this file. It will allow you to bypass always executing these behaviors when the Gremlin evaluator loads -- an auto-import of sorts.