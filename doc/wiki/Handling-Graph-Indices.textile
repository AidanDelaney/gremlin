Graphs in the property graph model provided by "Blueprints":http://blueprints.tinkerpop.com support the indexing of vertices and edges by their properties. The index model is very simple and will form the point of discussion for this section of documentation. When working with indices within Gremlin, there are a set of index-based functions to be aware of.

# "Index All":#idx-all @null g:idx-all(graph?, boolean)@: whether or not to index every property of every vertex and edge.
# "Add Index":#add-idx @null g:add-idx(graph?, string)@: if you don't index everything, you can specify which properties (by key) to add to the index.
# "Remove Index":#remove-idx @null g:remove-idx(graph?, string)@: if you don't index everything, you can specify which properties (by key) to remove from the index.

h2(#idx-all). Index All Function

When a graph is originally created, it is assumed that all properties will be indexed. Here is an example.

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0]
gremlin> $v := g:add-v()
==>v[0]
gremlin> $v/@name := 'marko'
==>marko
gremlin> g:key-v('name','marko')
==>v[0]

Notice how the vertex can retrieved by its @name@ key and @marko@ value using the @g:key(graph?, string, object)@ function. Lets now set the @g:idx-all(boolean)@ function to @false@.

bc. gremlin> $_g := tg:open()
==>tinkergraph[vertices:0]
gremlin> g:idx-all(false)
gremlin> $v := g:add-v()
==>v[0]
gremlin> $v/@name := 'marko'
==>marko
gremlin> g:key-v('name','marko')
gremlin>

Notice how the vertex is not retrieved using the @g:key(graph?, string, object)@ object. This is because the auto-indexing was set to @false@ with the @g:idx-all(boolean)@ function.

h2(#add-idx). Add Index Function

h2(#remove-idx). Remove Index Function