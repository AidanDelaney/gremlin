[[https://github.com/tinkerpop/gremlin/raw/master/doc/images/gremlin-running.png|width=125px|align=left|float]]

There are numerous ways to denote the same path expression. The trade off is between readability and speed. To maximize readability, "Groovy closures":http://groovy.codehaus.org/Closures are usually the way to go. To maximize speed, the general rule is to avoid closures if possible. While using Groovy closures may make a path expression easier to read, unfortunately, its slower than the corresponding @Pipe@. However, when no corresponding @Pipe@ exists, then a closure is the appropriate solution. This section demonstrates the various ways to express the same path and provides some timing statistics on the graph described in [[Defining a More Complex Property Graph]].

```java
g = new TinkerGraph()
GraphMLReader.inputGraph(g, new FileInputStream('data/graph-example-2.xml'))
```

All the examples make use of the following code snippet to determine timing:

```java
t = System.currentTimeMillis()
// the expression
System.currentTimeMillis() - t
```


h2. ClosureFilterPipe vs. PropertyFilterPipe vs. OutEdgesPipe vs. OutPipe

```text
~20000ms: g.V.outE{it['label']=='followed_by'}.inV.outE{it['label']=='followed_by'}.inV.outE{it['label']=='followed_by'}.inV >>-1
~9000ms: g.V.outE{it.label=='followed_by'}.inV.outE{it.label=='followed_by'}.inV.outE{it.label=='followed_by'}.inV >>-1
~8500ms: g.V.outE{it.getLabel()=='followed_by'}.inV.outE{it.getLabel()=='followed_by'}.inV.outE{it.getLabel()=='followed_by'}.inV >>-1
~6000ms: g.V.outE[[label:'followed_by']].inV.outE[[label:'followed_by']].inV.outE[[label:'followed_by']].inV >>-1
~5000ms: g.V.outE('followed_by').inV.outE('followed_by').inV.outE('followed_by').inV >>-1
~4000ms: g.V.out('followed_by').out('followed_by').out('followed_by') >>-1
```

The segment @outE[label:'followed_by']@ is two pipes: @VertexEdgePipe@ and @LabelFilterPipe@. The segment, @outE{it.label=='followed_by'}@ is two pipes: @VertexEdgePipe@ and @ClosureFilterPipe@. Every time an object enters a @ClosureFilterPipe@, the closure is evaluated (which is not represented in native Java, but instead, Groovy). The truth-value returned by the closure @{it.label=='followed_by'}@ determines whether @it@ is passed to the next step or not. The final section goes "vertex-to-vertex" and uses @followed_by@ as the edge label to traverse. Its the most efficient as 1.) no closure is used and 2.) it jumps from vertex-to-vertex instead of vertex-to-edge-to-vertex.

h2. Using Loops

```text
~1500ms: g.v(89).out.loop(1){it.loops < 5} >> -1
~750ms: g.v(89).out.out.out.out >> -1
```

The @loop@ step takes a closure that determine whether to loop an object or not. "Unrolling" the loop is more efficient than using @loop@. In many situations, knowing how many times to loop is not known and as such, @loop@ is required.

h2. ClosureFilterPipe Models

```text
~30000ms: g.V.outE{it.label=='followed_by' & it.weight>0.0}.inV.outE{it.label=='followed_by' & it.weight>0.0}.inV >>-1
~1200ms: g.V.outE{it['label']=='followed_by' & it['weight']>0.0}.inV.outE{it['label']=='followed_by' & it['weight']>0.0}.inV >>-1
~600ms: g.V.outE{it.label=='followed_by' & it.getProperty('weight')>0.0}.inV.outE{it.label=='followed_by' & it.getProperty('weight')>0.0}.inV >>-1
```

```text
~30000ms: g.V.outE{it.label=='followed_by' | it.weight>0.0}.inV.outE{it.label=='followed_by' | it.weight>0.0}.inV >>-1
~1000ms: g.V.outE{it['label']=='followed_by' | it['weight']>0.0}.inV.outE{it['label']=='followed_by' | it['weight']>0.0}.inV >>-1
~500ms: g.V.outE{it.label=='followed_by' | it.getProperty('weight')>0.0}.inV.outE{it.label=='followed_by' | it.getProperty('weight')>0.0}.inV >>-1
```

The closure approach in the first expression is two orders of magnitude slower than using the respective pure Pipes model (the last and fastest expression). Note that the reason why it is so slow is because of @it.weight@. When changed to @it.getProperty('weight')@, its much faster because a direct reference to the appropriate Java method is known. Using @it.weight@ is a convenient, but slow convention. As a relatively happy middle ground, there is @it['weight']@. 

Theses example articulates the point of the trade-off between readability and speed.

h2. Method Notation vs. Property Notation

Gremlin makes use of a dot-notation syntax, where (in Groovy/Java-speak) the references are to properties, not methods. What makes this possible is dynamic programming in Groovy and the ability to make a property return the evaluation of a method. 

```java
Pipe.metaClass.propertyMissing = {final String name ->
  if (Gremlin.isStep(name)) {
    return delegate."$name"();
  } 
  ...
}
```

However, the drawback of Gremlin's terse syntax is that it takes Groovy longer to compile the Gremlin statement as it requires heavy reflection. Below are some timings of identical Gremlin statements. The first uses the standard, terse property notation. The latter, uses the Java/Groovy method notation. The times presented are the times required to construct the pipeline, not to evaluate it. The evaluation of both styles is identical.

```text
~0.4ms: g.V.outE.inV
~0.2ms: g.V().outE().inV()

~0.6ms: g.V.outE.inV.outE.inV
~0.3ms: g.V().outE().inV().outE().inV()

~0.8ms: g.V.outE[[label:'knows']].inV.outE[[label:'knows']].inV
~0.5ms: g.V().outE()[[label:'knows']].inV().outE()[[label:'knows']].inV()
```