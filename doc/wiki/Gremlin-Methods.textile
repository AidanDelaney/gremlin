The full "Java API":http://download.oracle.com/javase/6/docs/api/ can be seamlessly accessed by Gremlin. Moreover, the "Blueprints":http://blueprints.tinkerpop.com and "Pipes":http://pipes.tinkerpop.com APIs can be accessed as well. For those that don't know Groovy, the standard Java ways of creating/constructing objects, calling methods, setting properties, etc. works. However, note that its worth learning a bit of Groovy as there are many shorthands that fit well with the scripting nature of Gremlin. For those method that are commonly used in Gremlin, Gremlin adds @MetaClass@ methods/operators to make it easier and faster to work with the Blueprints and Pipes APIs. These @MetaClass@ methods/operators are provided in the table below.

*Developer Note*: If you come up a with a generally useful method and would like to include it into the main Gremlin distribution, please make an "issue":https://github.com/tinkerpop/gremlin/issues or provide the appropriate pull request.

|_. method/operator |_. equivalence |_. description |
| @Object.mean()@ | no simple representation | the average of the delegate |
| @Graph.v(Object)@ | @Graph.getVertex(Object)@ | get a vertex by its id |
| @Graph.e(Object)@ | @Graph.getEdge(Object)@ | get an edge by its id |
| @Graph.idx(String)@ | @Graph.getIndex(String, Class, Type)@ | get an index by its name |
| @Index[Map.Entry]@ | @Index.get(String, Object)@ | get an element by its key/value |
| @Element.key@ | @Element.getProperty(key)@ | get the value of a property by key |
| @Element.key = value@ | @Element.setProperty(key,value)@ | set the value of a property |
| @Element[key]@ | @Element.getProperty(key)@ | get the value of a property by key |
| @Element[key] = value@ | @Element.setProperty(key,value)@ | set the value of a property |
| @Element.keys()@ | @Element.getPropertyKeys()@ | get the property keys of the element |
| @Element.values()@ | no simple representation | get the property values of the element |
| @Element.map()@ | no simple representation | get the property map of the element |
| @Pipe>>1@ | @Iterator.next()@ | get the next object in the pipe |
| @Pipe>>Integer@ | no simple representation | get the next @n@ objects in pipe and return as a list |
| @Pipe>>-1@ | no simple representation | @next()@ all the objects out of the pipe |
| @Pipe>>Collection@ | no simple representation | add all the pipe objects to the collection |
| @Pipe.count()@ | @PipeHelper.counter(Pipe)@ | count the number of elements in the pipe |

*Note*: All @Pipe@ methods/operators also work for @Iterator@ and @Iterable@.